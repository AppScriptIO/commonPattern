"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.createProxyHandlerReflectedToTargetObject = createProxyHandlerReflectedToTargetObject;exports.addRequiredPropertyForConstructorProxy = addRequiredPropertyForConstructorProxy;













function createProxyHandlerReflectedToTargetObject({
  target,
  trapHandler = {},

  nonConstructorTrapNameList = [
  'get',
  'set',
  'deleteProperty',
  'enumerate',
  'ownKeys',
  'has',
  'defineProperty',
  'getOwnPropertyDescriptor',
  'getPrototypeOf',
  'setPrototypeOf',
  'isExtensible',
  'preventExtensions'],


  constructorTrapNameList = ['construct', 'apply'] })
{
  let trapNameList;


  if (typeof target == 'function') {
    trapNameList = nonConstructorTrapNameList.concat(constructorTrapNameList);
  } else {
    trapNameList = nonConstructorTrapNameList;
  }

  trapHandler = trapNameList.reduce((accumulator, trapName) => {

    accumulator[trapName] = function (originalTarger, ...args) {
      return Reflect[trapName](target, ...args);
    };
    return accumulator;
  }, trapHandler);
  return trapHandler;
}







function addRequiredPropertyForConstructorProxy({
  proxyHandler,
  constructor = new Function() })
{
  function ensurePropertyExistFor_ownKeysTrap({ targetTrap }) {
    return (...args) => {
      let array = targetTrap(...args);
      if (!array.includes('arguments')) array.push('arguments');
      if (!array.includes('prototype')) array.push('prototype');
      return array;
    };
  }
  function ensurePropertyExistFor_getOwnPropertyDescriptorTrap({ targetTrap }) {
    return (...args) => {
      let property = args[1];
      let object = targetTrap(...args);
      if (!object) {
        if (property == 'constructor') {
          object = Object.getOwnPropertyDescriptor(constructor, 'constructor');
        }
        if (property == 'prototype') {
          object = Object.getOwnPropertyDescriptor(constructor, 'prototype');
        }
      }
      return object;
    };
  }
  if (proxyHandler['ownKeys']) proxyHandler['ownKeys'] = ensurePropertyExistFor_ownKeysTrap({ targetTrap: proxyHandler['ownKeys'] });
  if (proxyHandler['getOwnPropertyDescriptor']) proxyHandler['getOwnPropertyDescriptor'] = ensurePropertyExistFor_getOwnPropertyDescriptorTrap({ targetTrap: proxyHandler['getOwnPropertyDescriptor'] });
  return proxyHandler;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,