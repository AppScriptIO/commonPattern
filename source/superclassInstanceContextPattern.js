"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.createContextClass = createContextClass;exports.superclassInstanceContextPattern = superclassInstanceContextPattern;exports.cacheInstance = cacheInstance;var _multiplePrototypeChain = require("@dependency/multiplePrototypeChain");






function createContextClass({ Superclass }) {




  class Context extends Superclass {







    constructor({ contextParameter }) {
      super();this.instance = { node: [], dataItem: [] };this.sharedContext = {};
      this.contextInstance = this;


      if (contextParameter) Object.assign(this.sharedContext, contextParameter);


      this.instanceExtendedSubclass = Object.keys(Superclass.extendedSubclass.static).
      reduce((accumulator, key) => {

        accumulator[key] = _multiplePrototypeChain.MultiplePrototypeChain.newChainOnInstanceCreation({
          Class: Superclass.extendedSubclass.static[key],
          contextInstance: this });

        return accumulator;
      }, {});
    }}

  return Context;
}

function superclassInstanceContextPattern() {
  return Class => {

    Class.prototype.getSubclass = function ({ subclassName }) {
      let contextInstance = this;
      return contextInstance.instanceExtendedSubclass[subclassName];
    };


    Class.prototype.callSubclass = function (name, args) {
      let contextInstance = this;
      return Reflect.construct(contextInstance.instanceExtendedSubclass[name], args);
    };

    let proxiedClass = new Proxy(Class, {

      construct: function (target, argumentsList, proxiedTarget) {
        let self = target;

        const Context = createContextClass({ Superclass: Class });
        let contextInstance = new Context({ contextParameter: argumentsList });
        return contextInstance;
      } });


    return proxiedClass;
  };
}




function cacheInstance({ cacheArrayName, keyArgumentName = 'key' }) {
  return (target, name, descriptor) => {
    let method = target[name];
    descriptor.value = new Proxy(method, {
      apply: async (target, thisArg, argumentsList) => {
        let [{ [keyArgumentName]: key }] = argumentsList;
        let cacheArray = thisArg.instance[cacheArrayName];
        let instance;
        if (key in cacheArray) {
          instance = cacheArray[key];
        } else {
          instance = await target.apply(thisArg, argumentsList);
          cacheArray[key] = instance;
        }
        return instance;
      } });

    return descriptor;
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,